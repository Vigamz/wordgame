import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";

const wordList = {
  animals: [
    { en: "Monkey", ru: "–û–±–µ–∑—å—è–Ω–∞" },
    { en: "Mouse", ru: "–ú—ã—à—å" },
    { en: "Panda", ru: "–ü–∞–Ω–¥–∞" },
    { en: "Seal", ru: "–¢—é–ª–µ–Ω—å" },
    { en: "Wolf", ru: "–í–æ–ª–∫" },
    { en: "Yak", ru: "–Ø–∫" },
    { en: "Lion", ru: "–õ–µ–≤" },
    { en: "Octopus", ru: "–û—Å—å–º–∏–Ω–æ–≥" },
    { en: "Turtle", ru: "–ß–µ—Ä–µ–ø–∞—Ö–∞" },
    { en: "Goat", ru: "–ö–æ–∑–ª–∏–∫" },
    { en: "Gorilla", ru: "–ì–æ—Ä–∏–ª–ª–∞" },
    { en: "Alligator", ru: "–ê–ª–ª–∏–≥–∞—Ç–æ—Ä" },
    { en: "Ant", ru: "–ú—É—Ä–∞–≤–µ–π" },
    { en: "Dog", ru: "–°–æ–±–∞–∫–∞" },
    { en: "Duck", ru: "–£—Ç–∫–∞" },
    { en: "Elephant", ru: "–°–ª–æ–Ω" },
    { en: "Fish", ru: "–†—ã–±–∞" },
    { en: "Horse", ru: "–õ–æ—à–∞–¥—å" },
    { en: "Insect", ru: "–ù–∞—Å–µ–∫–æ–º–æ–µ" },
    { en: "Iguana", ru: "–ò–≥—É–∞–Ω–∞" }
  ],
  food: [
    { en: "Jam", ru: "–í–∞—Ä–µ–Ω—å–µ" },
    { en: "Juice", ru: "–°–æ–∫" },
    { en: "Milk", ru: "–ú–æ–ª–æ–∫–æ" },
    { en: "Peach", ru: "–ü–µ—Ä—Å–∏–∫" },
    { en: "Pineapple", ru: "–ê–Ω–∞–Ω–∞—Å" },
    { en: "Olive", ru: "–û–ª–∏–≤–∫–∞" },
    { en: "Rice", ru: "–†–∏—Å" },
    { en: "Egg", ru: "–Ø–π—Ü–æ" }
  ],
  clothes: [
    { en: "Jacket", ru: "–ö—É—Ä—Ç–∫–∞" },
    { en: "Hat", ru: "–®–∞–ø–∫–∞" },
    { en: "Socks", ru: "–ù–æ—Å–∫–∏" }
  ],
  furniture: [
    { en: "Pen", ru: "–†—É—á–∫–∞" },
    { en: "Box", ru: "–ö–æ—Ä–æ–±–∫–∞" },
    { en: "Watch", ru: "–ß–∞—Å—ã" },
    { en: "Desk", ru: "–ü–∞—Ä—Ç–∞" },
    { en: "Doll", ru: "–ö—É–∫–ª–∞" },
    { en: "Fan", ru: "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä" },
    { en: "Fork", ru: "–í–∏–ª–∫–∞" },
    { en: "Lamp", ru: "–õ–∞–º–ø–∞" },
    { en: "Key", ru: "–ö–ª—é—á" },
    { en: "Envelope", ru: "–ö–æ–Ω–≤–µ—Ä—Ç" }
  ],
  home: [
    { en: "House", ru: "–î–æ–º" },
    { en: "Tent", ru: "–ü–∞–ª–∞—Ç–∫–∞" },
    { en: "Farm", ru: "–§–µ—Ä–º–∞" },
    { en: "Quilt", ru: "–û–¥–µ—è–ª–æ" },
    { en: "Gift", ru: "–ü–æ–¥–∞—Ä–æ–∫" }
  ],
  nature: [
    { en: "Leaf", ru: "–õ–∏—Å—Ç" },
    { en: "Nest", ru: "–ì–Ω–µ–∑–¥–æ" },
    { en: "Nut", ru: "–û—Ä–µ—Ö" }
  ],
  school: [
    { en: "Teacher", ru: "–£—á–∏—Ç–µ–ª—å" },
    { en: "Quiz", ru: "–¢–µ—Å—Ç" },
    { en: "Question", ru: "–í–æ–ø—Ä–æ—Å" }
  ],
  other: [
    { en: "Money", ru: "–î–µ–Ω—å–≥–∏" },
    { en: "Soap", ru: "–ú—ã–ª–æ" },
    { en: "Web", ru: "–°–µ—Ç—å" },
    { en: "The Sun", ru: "–°–æ–ª–Ω—Ü–µ" },
    { en: "Water", ru: "–í–æ–¥–∞" },
    { en: "Wax", ru: "–í–æ—Å–∫" },
    { en: "Net", ru: "–°–∞—á–æ–∫" },
    { en: "King", ru: "–ö–æ—Ä–æ–ª—å" },
    { en: "Queen", ru: "–ö–æ—Ä–æ–ª–µ–≤–∞" },
    { en: "Jet", ru: "–°–∞–º–æ–ª–µ—Ç" },
    { en: "Ax", ru: "–¢–æ–ø–æ—Ä" }
  ]
};

const topics = Object.entries({
  animals: "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
  food: "–§—Ä—É–∫—Ç—ã / –ï–¥–∞",
  clothes: "–û–¥–µ–∂–¥–∞",
  furniture: "–ú–µ–±–µ–ª—å",
  home: "–î–æ–º / –±—ã—Ç",
  nature: "–ü—Ä–∏—Ä–æ–¥–∞",
  school: "–£—á—ë–±–∞",
  other: "–ü—Ä–æ—á–µ–µ"
});

export default function WordGame() {
  const [topic, setTopic] = useState("animals");
  const [currentWord, setCurrentWord] = useState(null);
  const [feedback, setFeedback] = useState("");
  const [recognition, setRecognition] = useState(null);
  const [isAnswering, setIsAnswering] = useState(false);
  const [mistakes, setMistakes] = useState([]);
  const [reviewMode, setReviewMode] = useState(false);
  const [reviewWords, setReviewWords] = useState([]);

  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      setFeedback("‚ö†Ô∏è –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏.");
      return;
    }
    const recog = new SpeechRecognition();
    recog.lang = "en-US";
    recog.interimResults = false;
    recog.maxAlternatives = 1;
    recog.onresult = (event) => {
      const spoken = event.results[0][0].transcript;
      handleAnswer(spoken);
    };
    recog.onstart = () => setIsAnswering(true);
    recog.onend = () => setIsAnswering(false);
    setRecognition(recog);
  }, []);

  useEffect(() => {
    nextWord();
  }, [topic, reviewMode, reviewWords]);

  function handleAnswer(answer) {
    const speak = (text) => {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = "en-US";
      speechSynthesis.speak(utterance);
    };
    const cleanAnswer = answer.trim().toLowerCase();
    const correct = currentWord.en.trim().toLowerCase();
    if (cleanAnswer === correct) {
      setFeedback(`‚úÖ Correct! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentWord.en}`);
      speak(currentWord.en);
      setTimeout(() => nextWord(), 1500);
    } else {
      setFeedback(`‚ùå Wrong. Correct answer: ${currentWord.en}`);
      speak(currentWord.en);
      setMistakes((prev) => [...prev, currentWord]);
    }
  }

  function nextWord() {
    const list = reviewMode ? reviewWords : wordList[topic];
    if (!list.length) {
      setFeedback(reviewMode
        ? "üéâ –¢—ã –∑–¥–æ—Ä–æ–≤–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –±–æ–ª—å—à–µ —Å–ª–æ–≤!"
        : "üéâ –í—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!");
      return;
    }
    const random = list[Math.floor(Math.random() * list.length)];
    setCurrentWord(random);
    setFeedback("");
  }

  function startReview() {
    if (mistakes.length === 0) {
      setFeedback("‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞! –¢—ã —Å—É–ø–µ—Ä! –í—Å–µ –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ!");
      return;
    }
    const listToReview = Array.from(new Set(mistakes.map(JSON.stringify))).map(JSON.parse);
    setReviewWords(listToReview);
    setReviewMode(true);
  }

  return (
    <div className="p-4 max-w-md mx-auto w-full min-h-screen flex flex-col justify-start items-center">
      <div className="mb-4 w-full text-center">
        <select
          value={topic}
          onChange={(e) => {
            setTopic(e.target.value);
            setReviewMode(false);
            setMistakes([]);
          }}
          className="border p-2 rounded w-full sm:w-1/2 text-center"
        >
          {topics.map(([key, label]) => (
            <option key={key} value={key}>
              {label}
            </option>
          ))}
        </select>
      </div>

      {currentWord && (
        <>
          <p className="text-xl mb-4 text-center">
            <strong>{currentWord.ru}</strong>
          </p>
          <div className="flex flex-col sm:flex-row gap-2 mt-2 justify-center w-full">
            {recognition && (
              <Button
                onClick={() => recognition.start()}
                disabled={isAnswering}
                className="w-full sm:w-auto"
              >
                {isAnswering ? "üéôÔ∏è –°–ª—É—à–∞—é..." : "üé§ –ü—Ä–æ–∏–∑–Ω–µ—Å–∏"}
              </Button>
            )}
            <Button onClick={nextWord} className="w-full sm:w-auto">
              ‚û°Ô∏è –î–∞–ª–µ–µ
            </Button>
            <Button onClick={startReview} className="w-full sm:w-auto" variant="outline">
              üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
            </Button>
          </div>
          {feedback && <p className="mt-4 text-lg text-center w-full">{feedback}</p>}
        </>
      )}
    </div>
  );
}
